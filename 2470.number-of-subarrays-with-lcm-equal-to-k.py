#
# @lc app=leetcode.cn id=2470 lang=python3
# @lcpr version=30204
#
# [2470] 最小公倍数等于 K 的子数组数目
#

from sbw import *
# @lcpr-template-start

# @lcpr-template-end
# @lc code=start
class Solution:
    def subarrayLCM(self, nums: List[int], k: int) -> int:
        _k=k
        k_factors=[1]
        f=2
        while f<=k:
            if k%f==0:
                ff=1
                while k%f==0:
                    ff*=f
                    k//=f 
                k_factors.append(ff)
            f+=1

        def get_factors(x):
            factors=[]
            for f in k_factors:
                if x%f==0:
                    factors.append(f)
            return factors



        # k_factors_copy=k_factors.copy()
        left1=0
        left2=0
        ret=0
        factor_count=defaultdict(int)
        matches=0
        for right, n in enumerate(nums):
            if _k % n !=0:
                left1=left2=right+1
                factor_count.clear()
                matches=0
                # k_factors=k_factors_copy.copy()
                continue
            for f in get_factors(n):
                if factor_count[f]==0:
                    matches+=1
                factor_count[f]+=1

            if matches<len(k_factors):
                ret+=left2-left1
                continue
            while matches==len(k_factors):
                pre=nums[left2]
                for f in get_factors(pre):
                    if factor_count[f]==1:
                        matches-=1
                    factor_count[f]-=1
                left2+=1
            ret+=left2-left1
        
        return ret


# @lc code=end
assert Solution().subarrayLCM([1000],1000)==1
assert Solution().subarrayLCM(nums = [3,6,2,7,1], k = 6)==4
assert Solution().subarrayLCM(nums = [5,1,1,1,2], k = 1)==6
assert Solution().subarrayLCM([204,67,629,630,545,439,715,639,461,914,677,911,895,903,567,529,523,306,225,448,661,294,869,435,901,161,458,378,601,428,356,728,394,511,760,743,444,658,372,401,673,277,809,419,862,794,301,580,842,815,955,61,283,289,170,523,105,15,869,43,511,451,864,384,534,951,469,205,620,726,976,337,154,600,439,729,759,451,506,637,806,588,15,164,263,257,114,622,245,259,273,266,737,638,110,821,594,127,410,59,695,104,331,773,505,110,24,212,607,917,821,414,446,99,647,553,474,942,791,972,800,273,78,581,534,303,417,827,175,81,820,802,115,742,65,368,408,943,32,884,717,728,357,935,81,168,462,166,542,9,98,861,648,203,220,799,722,803,173,695,978,29,625,388,532,243,849,186,637,479,974,815,91,600,601,947,140,362,591,450,648,432,293,721,597,705,955,556,483,611,847,841,553,908,432,632,506,311,36,387,793,651,296,543,727,543,365,473,558,105,361,670,988,572,680,962,115,95,42,925,256,355,781,634,795,664,679,597,721,584,705,850,794,347,19,643,436,634,775,285,693,940,612,205,786,681,380,757,36,445,18,695,550,918,714,957,809,916,575,888,903,481,654,483,3,906,386,697,546,298,794,640,781,937,436,875,802,65,66,783,33,871,776,276,173,965,93,430,88,473,902,606,183,118,845,984,894,148,937,160,884,306,588,267,352,169,349,199,398,658,771,369,614,17,825,395,421,86,936,897,560,630,228,358,355,634,819,157,465,995,670,474,140,6,565,699,210,833,941,393,485,161,591,555,324,253,469,806,505,31,763,652,442,967,395,642,488,841,720,70,809,185,594,396,663,404,414,613,520,497,153,205,66,582,438,555,406,702,294,911,794,551,834,976,151,507,87,267,189,910,70,61,813,263,629,937,647,94,191,877,752,994,249,474,372,615,727,970,112,548,917,679,788,296,166,762,632,546,606,563,42,259,888,56,194,950,873,444,275,817,162,87,297,249,502,795,513,937,194,253,713,160,648,696,978,915,484,663,552,586,242,386,974,140,383,276,754,888,143,49,923,657,360,350,36,379,174,729,195,931,347,259,180,117,616,102,718,30,440,880,688,185,672,359,563,662,18,783,228,356,680,157,637,996,311,605,461,171,507,526,346,831,789,328,29,528,241,794,1,248,78,130,920,871,331,791,530,499,585,225,223,508,703,631,500,390,259,623,747,2,692,660,270,63,864,786,127,449,779,267,885,957,678,135,920,297,698,991,100,629,144,941,443,339,429,740,464,364,801,183,665,676,598,520,602,553,563,195,935,191,754,380,585,972,396,935,426,614,468,789,728,21,761,547,22,939,892,161,284,585,221,314,349,713,2,988,990,86,793,511,76,515,139,366,914,713,778,401,781,523,529,947,933,655,5,271,782,683,826,937,157,782,271,322,817,575,779,669,691,362,319,361,196,971,594,320,763,760,604,981,247,439,819,773,624,826,259,168,802,114,309,662,2,481,583,638,901,90,939,549,445,553,328,67,108,156,977,539,50,463,922,629,339,876,916,338,187,166,489,766,394,347,93,185,594,931,236,841,793,895,34,764,643,175,102,313,279,973,282,609,732,770,752,408,415,206,124,893,992,702,556,602,165,501,55,495,150,511,997,159,404,919,215,552,991,128,797,939,747,373,997,764,369,100,581,824,183,23,988,639,22,814,918,59,498,641,342,810,250,152,715,754,916,12,554,613,452,405,169,88,866,844,208,986,651,591,426,780,377,232,990,11,736,819,785,956,577,88,951,41,555,613,524,209,80,313,150,119,28,272,34,461,331,814,116,980,278,703,543,567,268,81,526,838,684,735,886,979,653,511,44,610,209,159,139,706,126,954,15,136,514,475,673,1,442,645,914,875,949,85,798,286,989,361,640,534,502,251,937,635],315)==0
assert Solution().subarrayLCM([3,10,8,7,20,2,13,15,14,12],6)==0
assert Solution().subarrayLCM(nums = [1], k = 1)==1
assert Solution().subarrayLCM(nums = [5], k = 1)==0
assert Solution().subarrayLCM(nums = [3], k = 2)==0


#
# @lcpr case=start
# [3,6,2,7,1]\n6\n
# @lcpr case=end

# @lcpr case=start
# [3]\n2\n
# @lcpr case=end

#

