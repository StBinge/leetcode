#
# @lc app=leetcode.cn id=3341 lang=python3
# @lcpr version=30204
#
# [3341] 到达最后一个房间的最少时间 I
#

# @lcpr-template-start
from sbw import *
# @lcpr-template-end
# @lc code=start
class Solution:
    def minTimeToReach(self, moveTime: List[List[int]]) -> int:
        R,C=len(moveTime),len(moveTime[0])

        times=[[float('inf')]*C for _ in range(R)]
        q=[[0,0,0]]
        times[0][0]=0
        while q:
            t,x,y=heapq.heappop(q)
            if x==R-1 and y==C-1:
                return t
            if t>times[x][y]:
                continue
            dirs=[-1,0,1,0,-1]
            for i in range(4):
                nx,ny=x+dirs[i],y+dirs[i+1]
                if 0<=nx<R and 0<=ny<C:
                    _t=max(t,moveTime[nx][ny])+1
                    if _t<times[nx][ny]:
                        times[nx][ny]=_t
                        heapq.heappush(q,[_t,nx,ny])
# @lc code=end
assert Solution().minTimeToReach([[0,963042268,226690202,182548898,826535156,848065312,960388206,556429105,163552592,641286108,209312070,501519743,98947233,276045339,802655624,83165542,79998493,225444157,898887097,809936931],[949467172,825751411,53618918,287099837,746730998,858214609,386055261,446022518,865623791,83900751,153390272,628621766,236094338,587377008,325119831,934146005,922554514,665713964,477775059,596145126],[960299370,618595785,978032774,856105264,882723963,315360181,417039820,777669377,217462557,234086339,284838632,793564863,517463473,961514594,55073134,409549974,733842996,339184993,831486431,159511296],[706668970,511656128,689006063,753070768,848170488,606831409,648542091,425678732,140312413,549984754,247662234,103685492,209064074,859580075,587613604,175545523,408700947,551680208,427634552,179044878],[747112119,352546002,281124633,815723054,363276323,372669587,604759643,237756055,469736981,528003099,106996984,519307363,276252141,699537114,670403260,709516010,801999419,99087975,656837649,230718803],[935952802,445960411,162431942,954602062,691209942,286154969,295827579,836381297,601903272,419122740,382147224,39698512,184833283,245500089,786630048,349255675,455316399,463565409,59085450,613282763],[34013132,798827401,621609157,51060114,704816415,34356614,231390040,847202351,160930960,419523793,407228207,675122068,8036498,562808423,404998862,493942468,984553317,998002252,958790366,869905324],[501362747,245198490,3563842,292388548,242508764,251541393,535175775,72680439,112335416,379374262,521218806,644829171,789466393,272814001,572514975,974944442,443315051,458553800,589117855,621444552],[957908915,836955105,614991000,589293588,495779617,413594680,377153947,347443414,670861419,297584754,237278542,802246516,357282822,308066655,631548120,785423163,99677721,570560668,374751058,879296189],[967816906,632263104,768833887,290430931,583894588,100965206,678832143,434033434,936150919,414601429,889582004,677245361,953397409,494986276,874880192,723372812,350603657,527690678,9142765,166400670],[954589180,371152778,282298492,664985235,163425758,685949954,124753854,886092400,623436789,443197946,542167662,316696480,952795263,951323285,867639338,497579047,881257474,279916215,992550704,177897477],[280410168,944596715,224576048,939844556,341404802,739091974,945557008,130862427,925660463,238816741,827105860,696420229,981383534,388166140,330886279,45336347,359223682,229620399,115847795,403421991],[233507966,341916757,619646840,150869930,52767877,621325574,146169899,667017145,24880372,146412595,367997406,315944036,839130803,537258316,879607720,414956748,575991478,64210458,708781125,440110789],[915587559,722180352,487909032,395394814,666840284,327435583,265661209,78306735,816556207,616529089,279655877,862345566,732714476,383553356,840777660,576986099,804313677,257661890,612874691,84033538],[671006107,164687170,985521644,621076127,579803188,684369,350204237,39312602,677505796,598225677,501833311,276533456,860486829,939604308,77870785,490787041,297485227,688831048,454449822,721425205],[379859751,808231268,432509576,923186383,671641378,498979916,5886267,843189813,483584820,616516053,691690175,847822338,272780581,440011722,204940555,380023699,520759958,175749554,47767212,0]])==949467206
assert Solution().minTimeToReach([[15,58],[67,4]])==60
assert Solution().minTimeToReach([[0,1],[1,2]])==3
assert Solution().minTimeToReach([[0,0,0],[0,0,0]])==3
assert Solution().minTimeToReach([[0,4],[4,4]])==6


#
# @lcpr case=start
# [[0,4],[4,4]]\n
# @lcpr case=end

# @lcpr case=start
# [[0,0,0],[0,0,0]]\n
# @lcpr case=end

# @lcpr case=start
# [[0,1],[1,2]]\n
# @lcpr case=end

#

